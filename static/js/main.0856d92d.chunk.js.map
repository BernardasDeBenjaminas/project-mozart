{"version":3,"sources":["songs/song1.mp3","songs/song2.mp3","songs/song3.mp3","helpers/songHelper.tsx","components/SongHeader/SongHeader.tsx","models/albumCover.ts","components/TagEditor/TagEditor.tsx","components/AudioPlayer/config/waveConfig.js","components/AudioPlayer/config/cursorConfig.js","components/AudioPlayer/AudioPlayer.tsx","components/SongRow/SongRow.tsx","models/fileSelection.ts","models/song.ts","helpers/fileHelper.tsx","components/FileInput/FileInput.tsx","components/ProgressBar/ProgressBar.tsx","components/Main/Main.tsx","index.tsx","components/SongHeader/cover_350x350.png"],"names":["module","exports","__webpack_require__","p","SongHelper","arrayBuffer","song","fileName","writer","TagWriter","title","setFrame","artist","album","year","albumCover","type","data","dataAsArrayBuffer","description","useUnicodeEncoding","addTag","FileSaver","saveAs","getBlob","songHeader","props","file","onToggleCutMode","onToggleEditMode","onClickDownload","isCuttingEnabled","isEditingEnabled","parsedHeading","concat","react_default","a","createElement","className","alt","src","dataAsTagSrc","DefaultCover","name","onClick","esm","content","arrow","placement","delay","AlbumCover","format","dataAsBytes","Object","classCallCheck","this","dataAsBase64","ArrayBuffer","Uint8Array","from","buffer","_arrayBufferAsBase64","_getTagSrc","fileFormat","btoa","bytes","len","byteLength","binary","i","String","fromCharCode","other","TagEditor","_this","possibleConstructorReturn","getPrototypeOf","call","handleInputClicked","inputElement","ReactDOM","findDOMNode","assertThisInitialized","getElementsByClassName","click","handleSongEdit","updatedField","updatedValue","originalSong","editableSong","state","setState","wasSongEdited","equals","handleUploadCover","e","target","files","length","reader","FileReader","onerror","onload","coverArrayBuffer","result","setCover","onUploadCover","readAsArrayBuffer","handleClickSaveChanges","onSaveChanges","handleClickCancel","copyTo","onCancelChanges","clone","_this2","_this$state$editableS","htmlFor","id","value","onChange","accept","Component","waveConfig","barWidth","barGap","hideScrollbar","cursorWidth","waveColor","progressColor","skipLength","cursorConfig","color","hideOnBlur","width","showTime","opacity","customShowTimeStyle","margin-left","padding","border-radius","background-color","customStyle","AudioPlayer","WAVEFORM_CONTAINER","REGION_COLOR","isPlaying","originalCutStart","NaN","originalCutEnd","cutStart","cutEnd","addFadeIn","addFadeOut","wasRegionChanged","componentWillUnmount","waveSurfer","destroy","onWaveSurferReady","on","onCropRegionCreated","onCropRegionUpdated","onCropRegionUpdateEnd","duration","getDuration","addRegion","start","end","params","element","attributes","_this$state","Math","abs","newRegion","recreateRegion","play","regionStart","regionEnd","_this$state2","startTime","endTime","clearRegions","onSongFinishedPlaying","handleClickTogglePlay","_this$state3","pause","handleClickJump","jumpToEnd","arguments","undefined","_this$state4","current","getCurrentTime","skip","skipForward","stop","handleClickCut","_this$state5","onCut","_this$state6","toggleFadeIn","prev","toggleFadeOut","blobToPlay","waveformDiv","WaveSurfer","create","objectSpread","container","plugins","CursorPlugin","RegionsPlugin","loadBlob","_this3","_this$state7","isLoading","toggleIcon","tooltip","LoadingOverlay_default","active","text","spinner","fadeSpeed","assign","SongRow","handleToggleEditMode","isEditModeEnabled","handleClickDownloadSong","asyncToGenerator","regenerator_default","mark","_callee","blob","wrap","_context","next","Response","sent","downloadSong","abrupt","err","console","log","handleToggleCutMode","isCutModeEnabled","onSongSave","newSong","wereChangesSaved","handleClickCancelChanges","handleCutSong","_ref2","_callee2","cutStartMs","cutEndMs","fadeMs","decoder","manipulator","processedBuffer","encoder","_context2","isBeingCut","Decoder","decodeFile","BufferManipulations","cut","fadeIn","fadeOut","apply","Encoder","encodeToMP3Blob","_x","_x2","_x3","_x4","onAlbumCoverUploaded","newCover","isDownloadEnabled","AudioPlayer_AudioPlayer","songToPlay","components_TagEditor_TagEditor","FileSelection","Song","cover","coverClone","FileHelper","promises","Array","forEach","push","Promise","resolve","reject","TagReader","read","onSuccess","tags","_tags$tags","picture","fileSelection","onError","error","message","FileInput","isProcessing","onFilesSelected","bind","onLoadDummySongs","input","document","getElementById","song1","require","song2","song3","dummySongs","fetch","then","response","_ref","potentialSongs","File","convertFilesToSongs","_callee3","_context3","_ref3","_callee4","_context4","selectedFiles","nodeValue","loadingMessage","onInputClicked","multiple","ProgressBar","maxValue","curValue","heading","percentage","round","lib","percent","status","Main","handleFilesSelected","timeout","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_loop","_iterator","_step","uploadedFiles","removeSongsOneByOne","songsProcessed","songsToProcess","potentialSong","setTimeout","toConsumableArray","Symbol","iterator","done","t0","return","finish","pop","ProgressBar_ProgressBar","components_FileInput_FileInput","map","u","components_SongRow_SongRow","key","render","components_Main_Main"],"mappings":"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","file":"static/js/main.0856d92d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/song1.b21c4c33.mp3\";","module.exports = __webpack_public_path__ + \"static/media/song2.7e259364.mp3\";","module.exports = __webpack_public_path__ + \"static/media/song3.a2ee4787.mp3\";","import TagWriter from 'browser-id3-writer';\r\nimport FileSaver from 'file-saver';\r\n\r\nimport Song from '../models/song';\r\n\r\nexport default class SongHelper {\r\n  static downloadSong(arrayBuffer: ArrayBuffer, song: Song, fileName: string): void {\r\n    const writer = new TagWriter(arrayBuffer);\r\n    if (song.title) {\r\n      writer.setFrame('TIT2', song.title);\r\n    }\r\n\r\n    if (song.artist) {\r\n      writer.setFrame('TPE1', [song.artist]);\r\n    }\r\n\r\n    if (song.album) {\r\n      writer.setFrame('TALB', song.album);\r\n    }\r\n\r\n    if (song.year) {\r\n      writer.setFrame('TYER', song.year);\r\n    }\r\n\r\n    if (song.albumCover) {\r\n      writer.setFrame('APIC', {\r\n        type: 0, // (Other) because my MP3 player only supports this one\r\n        data: song.albumCover.dataAsArrayBuffer,\r\n        description: '',\r\n        useUnicodeEncoding: false,\r\n      });\r\n    }\r\n\r\n    writer.addTag();\r\n\r\n    FileSaver.saveAs(writer.getBlob(), fileName);\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Tippy from '@tippy.js/react';\r\nimport Song from '../../models/song';\r\nimport DefaultCover from './cover_350x350.png';\r\nimport AlbumCover from '../../models/albumCover';\r\nimport './song-header.scss';\r\n\r\ntype Props = {\r\n  file: File;\r\n  song: Song;\r\n  albumCover?: AlbumCover,\r\n  editableSong: Song;\r\n  onToggleCutMode: Function;\r\n  onToggleEditMode: Function;\r\n  onClickDownload: Function;\r\n  isCuttingEnabled: boolean;\r\n  isEditingEnabled: boolean;\r\n  isDownloadEnabled: boolean;\r\n};\r\n\r\nexport default function songHeader(props: Props) {\r\n  const {\r\n    file,\r\n    song,\r\n    albumCover,\r\n    onToggleCutMode,\r\n    onToggleEditMode,\r\n    onClickDownload,\r\n    isCuttingEnabled,\r\n    isEditingEnabled,\r\n  } = props;\r\n\r\n  const parsedHeading = song.title && song.artist ? `${song.artist} - ${song.title}` : '';\r\n\r\n  return (\r\n    <div className=\"row align-items-center mzt-song-wrapper\">\r\n\r\n      {/* [IMAGE] Album cover */}\r\n      <div className=\"col-auto\">\r\n        <img className=\"img-thumbnail\"\r\n          alt=\"album cover\"\r\n          src={albumCover ? albumCover.dataAsTagSrc : DefaultCover} />\r\n      </div>\r\n\r\n      {/* [TEXT] File name */}\r\n      <div className=\"col mzt-col-song-header\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <h3>\r\n              <span className=\"mzt-song-filename\">{file.name}</span>\r\n            </h3>\r\n          </div>\r\n        </div>\r\n\r\n        {/* [TEXT] Parsed heading */}\r\n        {\r\n          parsedHeading &&\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <h4>\r\n                <span className=\"mzt-song-heading\">{parsedHeading}</span>\r\n              </h4>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      {/* [BUTTONS] */}\r\n      <div className=\"col-1\">\r\n\r\n        {/* Edit the song's tags */}\r\n        <div className=\"row\" onClick={() => onToggleEditMode()}>\r\n          <Tippy content=\"Toggle edit mode\" arrow={true} placement=\"right\" delay={400}>\r\n            <i className={`fas fa-pencil-alt mzt-btn-actions ${isEditingEnabled ? 'active' : ''}`}></i>\r\n          </Tippy>\r\n        </div>\r\n\r\n        {/* Cut the song */}\r\n        <div className=\"row\" onClick={() => onToggleCutMode()}>\r\n          <Tippy content=\"Toggle cut mode\" arrow={true} placement=\"right\" delay={400}>\r\n            <i className={`fas fa-cut mzt-btn-actions ${isCuttingEnabled ? 'active' : ''}`}></i>\r\n          </Tippy>\r\n        </div>\r\n\r\n        {/* Download song */}\r\n        <div className=\"row\" onClick={() => onClickDownload()}>\r\n          <Tippy content=\"Download the song\" arrow={true} placement=\"right\" delay={400}>\r\n            <i className=\"fas fa-download mzt-btn-actions\"></i>\r\n          </Tippy>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default class AlbumCover {\r\n  public format: string;\r\n\r\n  public dataAsBase64: string;\r\n  public dataAsTagSrc: string;\r\n  public dataAsArrayBuffer: ArrayBuffer;\r\n\r\n  /**\r\n   * @param format ex.: 'image/png'\r\n   * @param dataAsBytes bytes of the image file\r\n   */\r\n  constructor(\r\n    format: string,\r\n    dataAsBytes: Array<number> | ArrayBuffer,\r\n    ) {\r\n    this.format = format;\r\n\r\n    this.dataAsArrayBuffer = dataAsBytes instanceof ArrayBuffer\r\n      ? dataAsBytes\r\n      : Uint8Array.from(dataAsBytes as Array<number>).buffer;\r\n\r\n    this.dataAsBase64 = this._arrayBufferAsBase64(this.dataAsArrayBuffer);\r\n    this.dataAsTagSrc = this._getTagSrc(this.format, this.dataAsBase64);\r\n  }\r\n\r\n  private _getTagSrc(fileFormat: string, dataAsBase64: string) {\r\n    return `data:${fileFormat};base64,${btoa(dataAsBase64)}`;\r\n  }\r\n\r\n  private _arrayBufferAsBase64(buffer): string {\r\n    const bytes = new Uint8Array(buffer);\r\n    const len = bytes.byteLength;\r\n\r\n    let binary = '';\r\n    for (let i = 0; i < len; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n\r\n    return binary;\r\n  }\r\n\r\n  /**\r\n   * Sets a new image as the cover.\r\n   * @param data new image to set\r\n   */\r\n  public setCover(data: ArrayBuffer) {\r\n    this.dataAsArrayBuffer = data;\r\n    this.dataAsBase64 = this._arrayBufferAsBase64(this.dataAsArrayBuffer);\r\n    this.dataAsTagSrc = this._getTagSrc(this.format, this.dataAsBase64);\r\n  }\r\n\r\n  /**\r\n   * Checks object equality between the current album cover and the passed in.\r\n   * @param other album cover to compare to\r\n   * @returns true if album covers are equal, else - false\r\n   */\r\n  public equals(other?: AlbumCover): boolean {\r\n    if (!other || this.dataAsTagSrc !== other.dataAsTagSrc) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Copies values from the origin AlbumCover to the 'other' albumCover.\r\n   *\r\n   * @param other AlbumCover to which to copy over values.\r\n   * @returns AlbumCover with copied over values.\r\n   */\r\n  public copyTo(other: AlbumCover) : AlbumCover {\r\n    other.format = this.format;\r\n    other.dataAsBase64 = this.dataAsBase64;\r\n    other.dataAsTagSrc = this.dataAsTagSrc;\r\n    other.dataAsArrayBuffer = this.dataAsArrayBuffer;\r\n    return other;\r\n  }\r\n}\r\n","import React, { Component, ChangeEvent } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Tippy from '@tippy.js/react';\r\nimport Song from '../../models/song';\r\nimport AlbumCover from '../../models/albumCover';\r\nimport './tag-editor.css';\r\n\r\ntype Props = {\r\n  originalSong: Song;\r\n  onSaveChanges: Function;\r\n  onUploadCover: Function;\r\n  onCancelChanges: Function;\r\n};\r\ntype State = {\r\n  editableSong: Song;\r\n  wasSongEdited: boolean;\r\n};\r\n\r\nclass TagEditor extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    const { originalSong } = this.props;\r\n\r\n    this.state = {\r\n      editableSong: originalSong.clone(),\r\n      wasSongEdited: false,\r\n    };\r\n  }\r\n\r\n  // TODO: Show unsaved changes on modified fields.\r\n  handleInputClicked = () => {\r\n    // Get the specific DOM 'input' element for cover upload\r\n    const componentDiv = ReactDOM.findDOMNode(this) as HTMLElement;\r\n    const inputElement = componentDiv.getElementsByClassName('btn-upload-cover')[0] as HTMLElement;\r\n\r\n    if (inputElement) {\r\n      inputElement.click();\r\n    }\r\n  }\r\n\r\n  handleSongEdit = (updatedField: string, updatedValue: any) => {\r\n    const { originalSong } = this.props;\r\n    const { editableSong } = this.state;\r\n    editableSong[updatedField] = updatedValue;\r\n\r\n    this.setState({\r\n      editableSong,\r\n      wasSongEdited: !originalSong.equals(editableSong),\r\n    });\r\n  }\r\n\r\n  handleUploadCover = (e: ChangeEvent<HTMLInputElement>) => {\r\n    // No file selected\r\n    if (!e.target.files || e.target.files.length < 1) return;\r\n\r\n    const file = e.target.files[0];\r\n\r\n    const reader = new FileReader();\r\n    reader.onerror = (e) => { debugger; };\r\n    reader.onload = () => {\r\n      const coverArrayBuffer = reader.result as ArrayBuffer;\r\n      const { editableSong } = this.state;\r\n      const { originalSong } = this.props;\r\n\r\n      if (editableSong.albumCover) {\r\n        editableSong.albumCover.setCover(coverArrayBuffer);\r\n      } else {\r\n        editableSong.albumCover = new AlbumCover(file.type, coverArrayBuffer);\r\n      }\r\n\r\n      this.setState({\r\n        editableSong,\r\n        wasSongEdited: !originalSong.equals(editableSong),\r\n      });\r\n\r\n      this.props.onUploadCover(editableSong.albumCover);\r\n    };\r\n    reader.readAsArrayBuffer(file);\r\n  }\r\n\r\n  handleClickSaveChanges = () => {\r\n    this.setState({\r\n      wasSongEdited: false,\r\n    });\r\n    this.props.onSaveChanges(this.state.editableSong);\r\n  }\r\n\r\n  handleClickCancel = () => {\r\n    const { editableSong } = this.state;\r\n    const { originalSong } = this.props;\r\n    this.setState({\r\n      editableSong: originalSong.copyTo(editableSong),\r\n      wasSongEdited: false,\r\n    });\r\n    this.props.onCancelChanges();\r\n  }\r\n\r\n  render() {\r\n    const { title, artist, album, year } = this.state.editableSong;\r\n    const { wasSongEdited } = this.state;\r\n\r\n    return (\r\n      <div className=\"row mzt-row-details\">\r\n        <div className=\"col\">\r\n          {/* TAGS ROW */}\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              {/* Title */}\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"mzt-input-title\">Title</label>\r\n                    <input id=\"mzt-input-title\" type=\"text\" className=\"form-control\"\r\n                      value={title}\r\n                      onChange={e => this.handleSongEdit('title', e.target.value)} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Artist */}\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"mzt-input-artist\">Artist</label>\r\n                    <input id=\"mzt-input-artist\" type=\"text\" className=\"form-control\"\r\n                      value={artist}\r\n                      onChange={e => this.handleSongEdit('artist', e.target.value)} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"col\">\r\n              {/* Album */}\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"mzt-input-album\">Album</label>\r\n                    <input id=\"mzt-input-album\" type=\"text\" className=\"form-control\"\r\n                      value={album}\r\n                      onChange={e => this.handleSongEdit('album', e.target.value)} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Year */}\r\n              <div className=\"row\">\r\n                <div className=\"col\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"mzt-input-year\">Year</label>\r\n                    <input id=\"mzt-input-year\" type=\"number\" className=\"form-control\"\r\n                      value={year}\r\n                      onChange={e => this.handleSongEdit('year', e.target.value)} />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div> {/* END OF TAGS ROW */}\r\n\r\n          {/* [BUTTONS] */}\r\n          <div className=\"row justify-content-center\">\r\n\r\n            {/* Save changes */}\r\n            <div className=\"col-1\">\r\n              <div {...(wasSongEdited ? { onClick: this.handleClickSaveChanges } : {})}>\r\n                <Tippy content=\"Save changes\" arrow={true} placement=\"bottom\" delay={400}>\r\n                  <i className={`fas fa-save mzt-btn-actions ${wasSongEdited ? 'success' : 'disabled'}`}></i>\r\n                </Tippy>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Upload new album cover */}\r\n            <div className=\"col-1\">\r\n              {/* Hidden */}\r\n              <input\r\n                className=\"btn-upload-cover mzt-invisible\"\r\n                type=\"file\"\r\n                accept=\".jpg,.jpeg\"\r\n                onChange={(e) => this.handleUploadCover(e)} />\r\n\r\n              {/* Visible */}\r\n              <div onClick={this.handleInputClicked}>\r\n                <Tippy content=\"Upload new album cover\" arrow={true} placement=\"bottom\" delay={400}>\r\n                  <i className=\"fas fa-file-image mzt-btn-actions\"></i>\r\n                </Tippy>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Cancel changes */}\r\n            <div className=\"col-1\">\r\n              <div onClick={this.handleClickCancel}>\r\n                <Tippy content=\"Cancel changes\" arrow={true} placement=\"bottom\" delay={400}>\r\n                  <i className={`fas fa-ban mzt-btn-actions ${wasSongEdited ? '' : 'disabled'}`}></i>\r\n                </Tippy>\r\n              </div>\r\n            </div>\r\n          </div> {/* END OF [BUTTONS] row*/}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TagEditor;\r\n","export default {\r\n  // If specified, draws the waveform in bar mode.\r\n  barWidth: 2,\r\n  // The optional spacing between bars of the wave, if not provided will be calculated in legacy format.\r\n  barGap: 2,\r\n  // Whether to hide the horizontal scrollbar when one would normally be shown.\r\n  hideScrollbar: true,\r\n  // Measured in pixels.\r\n  cursorWidth: 0,\r\n  // The fill color of the waveform after the cursor.\r\n  waveColor: '#d0d0d0', // 'disabled button' gray\r\n  // The fill color of the part of the waveform behind the cursor. \r\n  // When 'progressColor' and 'waveColor' are the same the progress wave is not rendered at all.\r\n  progressColor: '#232526',\r\n  // Number of seconds to skip with the 'skipForward()' and 'skipBackward()' methods.\r\n  skipLength: 5,\r\n};","export default {\r\n  // The color of the cursor.\r\n  color: 'white',\r\n  // Hide the cursor when the mouse leaves the waveform.\r\n  hideOnBlur: true,\r\n  // The width of the cursor.\r\n  width: '2px',\r\n  // \tShow the time on the cursor.\r\n  showTime: true,\r\n  // The opacity of the cursor.\r\n  opacity: '1',\r\n  // An object with custom styles which are applied to the cursor time element.\r\n  customShowTimeStyle: {\r\n    'margin-left': '5px',\r\n    'padding': '1px 7px 3px 7px',\r\n    'border-radius': '0.2em',\r\n    'background-color': 'white',\r\n  },\r\n  // An object with custom styles which are applied to the cursor element.\r\n  customStyle: {\r\n    // The cursor doesn't center to the mouse so we shift it.\r\n    'margin-left': '13.5px',\r\n  },\r\n};","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport Tippy from '@tippy.js/react';\r\nimport Song from '../../models/song';\r\nimport waveConfig from './config/waveConfig';\r\nimport WaveSurfer from 'wavesurfer.js';\r\nimport cursorConfig from './config/cursorConfig';\r\nimport CursorPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.cursor.min.js';\r\nimport RegionsPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';\r\nimport './audio-player.css';\r\n\r\ntype Props = {\r\n  songToPlay: Song;\r\n  blobToPlay: Blob;\r\n  onCut: Function;\r\n};\r\ntype State = {\r\n  /** Is the song currently playing. */\r\n  isPlaying: boolean;\r\n  /** * Start time of the region to cut. */\r\n  cutStart: number;\r\n  /** Original start time of the region (used when user presses 'Cancel'). */\r\n  originalCutStart: number;\r\n  /** End time of the region to cut. */\r\n  cutEnd: number;\r\n  /** Original end time of the region (used when user presses 'Cancel'). */\r\n  originalCutEnd: number;\r\n  /** Should the song be cut with a fade in. */\r\n  addFadeIn: boolean;\r\n  /** Should the song be cut with a fade out. */\r\n  addFadeOut: boolean;\r\n  /** The main library for displaying the audio wave. */\r\n  waveSurfer?: WaveSurfer;\r\n  /** Marks whether the regions were moved. */\r\n  wasRegionChanged: boolean;\r\n};\r\n\r\nexport default class AudioPlayer extends Component<Props, State> {\r\n  private readonly WAVEFORM_CONTAINER: string = 'waveform';\r\n  private readonly REGION_COLOR: string = 'rgba(0, 123, 255, 0.48)';\r\n\r\n  state: State = {\r\n    isPlaying: false,\r\n    originalCutStart: NaN,\r\n    originalCutEnd: NaN,\r\n    cutStart: NaN,\r\n    cutEnd: NaN,\r\n    addFadeIn: false,\r\n    addFadeOut: false,\r\n    wasRegionChanged: false,\r\n  };\r\n\r\n  /** Generate and show the audio wave. */\r\n  componentDidMount() {\r\n    const { blobToPlay } = this.props;\r\n\r\n    // Get the specific DOM element for storing the wave visualization\r\n    const componentDiv = ReactDOM.findDOMNode(this) as HTMLElement;\r\n    const waveformDiv = componentDiv.getElementsByClassName('waveform')[0] as HTMLElement;\r\n\r\n    const waveSurfer = WaveSurfer.create({\r\n      // Get the specific DOM element for storing the wave visualization\r\n      container: waveformDiv,\r\n      ...waveConfig,\r\n      plugins: [\r\n        // Add a vertical cursor on the wave form when the mouse hovers over it\r\n        CursorPlugin.create({ ...cursorConfig }),\r\n        // Initialize the plugin that adds a dragable region over the waveform\r\n        RegionsPlugin.create(),\r\n      ],\r\n    });\r\n    waveSurfer.on('ready', () => this.onWaveSurferReady(waveSurfer));\r\n    waveSurfer.on('finish', () => this.onSongFinishedPlaying());\r\n    waveSurfer.loadBlob(blobToPlay);\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    const { waveSurfer } = this.state;\r\n    if (!waveSurfer) return;\r\n\r\n    waveSurfer.destroy();\r\n  }\r\n\r\n  /**\r\n   * Start listening to region events.\r\n   * Draw the region itself.\r\n   */\r\n  onWaveSurferReady = (waveSurfer: WaveSurfer) => {\r\n    waveSurfer.on('region-created', this.onCropRegionCreated);\r\n    waveSurfer.on('region-updated', this.onCropRegionUpdated);\r\n    waveSurfer.on('region-update-end', this.onCropRegionUpdateEnd);\r\n\r\n    let cutStart: number;\r\n    let cutEnd: number;\r\n    const duration = waveSurfer.getDuration();\r\n\r\n    if (duration > 40) {\r\n      cutStart = 20;\r\n      cutEnd = duration - 20;\r\n    } else {\r\n      cutStart = 0;\r\n      cutEnd = duration;\r\n    }\r\n\r\n    waveSurfer.addRegion({\r\n      start: cutStart,\r\n      end: cutEnd,\r\n      color: this.REGION_COLOR,\r\n    });\r\n\r\n    this.setState({\r\n      waveSurfer,\r\n      cutStart,\r\n      cutEnd,\r\n      originalCutStart: cutStart,\r\n      originalCutEnd: cutEnd,\r\n    });\r\n  }\r\n\r\n  onCropRegionCreated = (params: any) => {\r\n    // Remove region's 'title' attribute showing the region's duration.\r\n    params.element.attributes.title.value = '';\r\n  }\r\n\r\n  /**\r\n   * Called when the draggable area has been moved.\r\n   * Recreate region if starting end overlaps the ending.\r\n   */\r\n  onCropRegionUpdated = (params: any) => {\r\n    const { start, end } = params;\r\n    const { cutStart, cutEnd, waveSurfer, isPlaying } = this.state;\r\n\r\n    if (!waveSurfer) return;\r\n\r\n    // Remove region's 'title' attribute showing the region's duration.\r\n    params.element.attributes.title.value = '';\r\n\r\n    // Check if one end of the region was dragged over the other one\r\n    if (Math.abs(start - end) > 0.25) {\r\n      return;\r\n    }\r\n\r\n    // Recreate region from last know valid positions\r\n    const newRegion = this.recreateRegion(waveSurfer, cutStart, cutEnd);\r\n\r\n    if (isPlaying) {\r\n      newRegion.play();\r\n    }\r\n\r\n    this.setState({\r\n      waveSurfer,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called when the region has finished moving (drag/expand/shrink).\r\n   */\r\n  onCropRegionUpdateEnd = (params: any) => {\r\n    const regionStart = params.start;\r\n    const regionEnd = params.end;\r\n    const {\r\n      isPlaying,\r\n      waveSurfer,\r\n      cutStart,\r\n    } = this.state;\r\n\r\n    if (!waveSurfer) return;\r\n\r\n    if (isPlaying) {\r\n      if (regionStart !== cutStart) {\r\n        waveSurfer.play(regionStart);\r\n      } else {\r\n        waveSurfer.play(regionEnd);\r\n      }\r\n    }\r\n\r\n    this.setState({\r\n      cutStart: regionStart,\r\n      cutEnd: regionEnd,\r\n      wasRegionChanged: true,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Recreate the region to given time stamps.\r\n   * @returns The newly created region.\r\n   */\r\n  recreateRegion = (waveSurfer: WaveSurfer, startTime: number, endTime: number) : WaveSurfer => {\r\n    waveSurfer.clearRegions();\r\n\r\n    return waveSurfer.addRegion({\r\n      start: startTime,\r\n      end: endTime,\r\n      color: this.REGION_COLOR,\r\n    });\r\n  }\r\n\r\n  onSongFinishedPlaying = () => {\r\n    this.setState({\r\n      isPlaying: false,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Play or pause the audio playback.\r\n   */\r\n  handleClickTogglePlay = () => {\r\n    const {\r\n      waveSurfer,\r\n      isPlaying,\r\n    } = this.state;\r\n\r\n    if (!waveSurfer) return;\r\n\r\n    if (isPlaying) {\r\n      waveSurfer.pause();\r\n    } else {\r\n      waveSurfer.play();\r\n    }\r\n\r\n    this.setState({ isPlaying: !isPlaying });\r\n  }\r\n\r\n  /**\r\n   * Jump the playback to the beginning/end of the song.\r\n   */\r\n  handleClickJump = (jumpToEnd: boolean = true) => {\r\n    const { isPlaying, waveSurfer } = this.state;\r\n    if (!waveSurfer) {\r\n      return;\r\n    }\r\n\r\n    if (jumpToEnd) {\r\n      const duration = waveSurfer.getDuration();\r\n      const current = waveSurfer.getCurrentTime();\r\n      waveSurfer.skip(duration - current - 5);\r\n      waveSurfer.pause();\r\n      waveSurfer.skipForward();\r\n      this.setState({ isPlaying: false });\r\n    } else {\r\n      waveSurfer.stop();\r\n      // If the song isn't playing - don't start it\r\n      if (isPlaying) {\r\n        waveSurfer.play();\r\n      }\r\n    }\r\n  }\r\n\r\n  handleClickCut = () => {\r\n    const {\r\n      waveSurfer,\r\n      isPlaying,\r\n      cutStart,\r\n      cutEnd,\r\n      addFadeIn,\r\n      addFadeOut,\r\n    } = this.state;\r\n\r\n    if (!waveSurfer) return;\r\n\r\n    if (isPlaying) {\r\n      waveSurfer.stop();\r\n      this.setState({\r\n        isPlaying: false,\r\n      });\r\n    }\r\n\r\n    this.props.onCut(cutStart, cutEnd, addFadeIn, addFadeOut);\r\n  }\r\n\r\n  /** Recreate the initial region. */\r\n  handleClickCancel = () => {\r\n    const {\r\n      waveSurfer,\r\n      originalCutStart,\r\n      originalCutEnd,\r\n    } = this.state;\r\n\r\n    if (!waveSurfer) return;\r\n\r\n    this.recreateRegion(waveSurfer, originalCutStart, originalCutEnd);\r\n    waveSurfer.stop();\r\n\r\n    this.setState({\r\n      waveSurfer,\r\n      isPlaying: false,\r\n      cutStart: originalCutStart,\r\n      cutEnd: originalCutEnd,\r\n      wasRegionChanged: false,\r\n    });\r\n  }\r\n\r\n  toggleFadeIn = () => {\r\n    this.setState((prev: State) => ({\r\n      addFadeIn: !prev.addFadeIn,\r\n    }));\r\n  }\r\n\r\n  toggleFadeOut = () => {\r\n    this.setState((prev: State) => ({\r\n      addFadeOut: !prev.addFadeOut,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      waveSurfer,\r\n      isPlaying,\r\n      wasRegionChanged,\r\n      addFadeIn,\r\n      addFadeOut,\r\n    } = this.state;\r\n    const isLoading = waveSurfer ? false : true;\r\n    const toggleIcon = `fas fa-${isPlaying ? 'pause' : 'play'} mzt-btn-actions`;\r\n    const tooltip = isPlaying ? 'Pause' : 'Play';\r\n\r\n    return (\r\n      <LoadingOverlay\r\n        className=\"loading-spinner\"\r\n        active={isLoading}\r\n        text=\"Generating audio wave..\"\r\n        spinner={true}\r\n        fadeSpeed={200}\r\n      >\r\n        <div className={`row mzt-row-waveform ${isLoading ? 'mzt-hidden' : ''}`}>\r\n          <div className=\"col\">\r\n            {/* The waveform */}\r\n            <div className=\"row\">\r\n              <div className=\"col\">\r\n                <div className={this.WAVEFORM_CONTAINER}/>\r\n              </div>\r\n            </div>\r\n\r\n            {/* [BUTTONS] */}\r\n            <div className=\"row justify-content-center\">\r\n              {/* Toggle fade in */}\r\n              <div className=\"col-1\" >\r\n                <Tippy content=\"Toggle fade in\" arrow={true} placement=\"bottom\" delay={400} >\r\n                  <i\r\n                    className={`fas fa-signal mzt-btn-actions ${addFadeIn ? 'active' : ''}`}\r\n                    onClick={this.toggleFadeIn} />\r\n                </Tippy>\r\n              </div>\r\n\r\n              {/* Toggle fade out */}\r\n              <div className=\"col-1\" >\r\n                <Tippy content=\"Toggle fade out\" arrow={true} placement=\"bottom\" delay={400} >\r\n                  <i\r\n                    className={`fas fa-signal mzt-btn-actions mirrored ${addFadeOut ? 'active' : ''}`}\r\n                    onClick={this.toggleFadeOut} />\r\n                </Tippy>\r\n              </div>\r\n\r\n              {/* Cut the song */}\r\n              <div className=\"col-1\" >\r\n                <Tippy content=\"Cut the song to selected region\" arrow={true} placement=\"bottom\" delay={400} >\r\n                  <i\r\n                    className={`fas fa-cut mzt-btn-actions ${wasRegionChanged ? 'success' : 'disabled'}`}\r\n                    {...(wasRegionChanged ? { onClick: this.handleClickCut } : {})}\r\n                  />\r\n                </Tippy>\r\n              </div>\r\n\r\n              {/* Jump to the beginning of the song */}\r\n              <div className=\"col-1\" >\r\n                <Tippy content=\"Jump to start\" arrow={true} placement=\"bottom\" delay={400} >\r\n                  <i className=\"fas fa-step-backward mzt-btn-actions\"\r\n                    onClick={() => this.handleClickJump(false)} />\r\n                </Tippy>\r\n              </div>\r\n\r\n              {/* Play/pause the song */}\r\n              <div className=\"col-1\">\r\n                <Tippy content={tooltip} arrow={true} placement=\"bottom\" delay={400} >\r\n                  <i className={toggleIcon}\r\n                    onClick={() => this.handleClickTogglePlay()} />\r\n                </Tippy>\r\n              </div>\r\n\r\n              {/* Jump to end */}\r\n              <div className=\"col-1\" >\r\n                <Tippy content=\"Jump to end\" arrow={true} placement=\"bottom\" delay={400} >\r\n                  <i className=\"fas fa-step-forward mzt-btn-actions\"\r\n                    onClick={() => this.handleClickJump(true)} />\r\n                </Tippy>\r\n              </div>\r\n\r\n              {/* Cancel changes (recreate initial region) */}\r\n              <div className=\"col-1\" >\r\n                <Tippy content=\"Recreate regions\" arrow={true} placement=\"bottom\" delay={400} >\r\n                <i\r\n                  className={`fas fa-ban mzt-btn-actions ${wasRegionChanged ? '' : 'disabled'}`}\r\n                  {...(wasRegionChanged ? { onClick: this.handleClickCancel } : {})}\r\n                />\r\n                </Tippy>\r\n              </div>\r\n            </div> {/* END OF [BUTTONS] ROW */}\r\n\r\n          </div>\r\n        </div>\r\n      </LoadingOverlay>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Encoder, Decoder, BufferManipulations } from 'alamp';\r\nimport Song from '../../models/song';\r\nimport SongHelper from '../../helpers/songHelper';\r\nimport SongHeader from '../SongHeader/SongHeader';\r\nimport TagEditor from '../TagEditor/TagEditor';\r\nimport AudioPlayer from '../AudioPlayer/AudioPlayer';\r\nimport './song-row.css';\r\nimport AlbumCover from '../../models/albumCover';\r\n\r\ntype Props = {\r\n  file: File;\r\n  song: Song;\r\n};\r\n\r\ntype State = {\r\n  blob?: Blob;\r\n  file: File;\r\n  /** Workaround because 'SongHeader' needs information from 'TagEditor' */\r\n  albumCover?: AlbumCover;\r\n  originalSong: Song;\r\n  editableSong: Song;\r\n  /** Is the song cutter menu is expanded. */\r\n  isCutModeEnabled: boolean;\r\n  /** Is the tag editor menu is expanded. */\r\n  isEditModeEnabled: boolean;\r\n  /** 'true' if the song was cut or tags updated. */\r\n  wereChangesSaved: boolean;\r\n  /** Is the song currently being processed. */\r\n  isBeingCut: boolean;\r\n};\r\n\r\nclass SongRow extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isBeingCut: false,\r\n      blob: undefined,\r\n      file: props.file,\r\n      isCutModeEnabled: false,\r\n      isEditModeEnabled: false,\r\n      wereChangesSaved: false,\r\n      albumCover: props.song.albumCover,\r\n      originalSong: props.song,\r\n      editableSong: props.song.clone(),\r\n    };\r\n  }\r\n\r\n  handleToggleEditMode = () => {\r\n    this.setState((prev: State) => ({\r\n      isEditModeEnabled: !prev.isEditModeEnabled,\r\n    }));\r\n  }\r\n\r\n  handleClickDownloadSong = async () => {\r\n    const {\r\n      blob,\r\n      file,\r\n      editableSong,\r\n      originalSong,\r\n    } = this.state;\r\n\r\n    if (blob) {\r\n      const arrayBuffer = await new Response(blob).arrayBuffer();\r\n      SongHelper.downloadSong(arrayBuffer, editableSong, file.name);\r\n      return;\r\n    }\r\n\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      const arrayBuffer = reader.result as ArrayBuffer;\r\n      SongHelper.downloadSong(arrayBuffer, editableSong, file.name);\r\n      this.setState({\r\n        editableSong,\r\n        originalSong: editableSong.copyTo(originalSong),\r\n      });\r\n    };\r\n    reader.onerror = (err) => {\r\n      console.log(err);\r\n      debugger;\r\n    };\r\n    reader.readAsArrayBuffer(this.state.file);\r\n  }\r\n\r\n  handleToggleCutMode = () => {\r\n    this.setState((prev: State) => ({\r\n      isCutModeEnabled: !prev.isCutModeEnabled,\r\n    }));\r\n  }\r\n\r\n  onSongSave = (newSong: Song) => {\r\n    const { editableSong } = this.state;\r\n    this.setState({\r\n      editableSong: newSong.copyTo(editableSong),\r\n      wereChangesSaved: true,\r\n    });\r\n  }\r\n\r\n  handleClickCancelChanges = () => {\r\n    const {\r\n      originalSong,\r\n      editableSong,\r\n    } = this.state;\r\n\r\n    this.setState({\r\n      editableSong: originalSong.copyTo(editableSong),\r\n      albumCover: originalSong.albumCover,\r\n    });\r\n  }\r\n\r\n  handleCutSong = async (cutStart: number, cutEnd: number, addFadeIn: boolean, addFadeOut: boolean) => {\r\n    const {\r\n      file,\r\n    } = this.state;\r\n\r\n    this.setState({\r\n      isBeingCut: true,\r\n    });\r\n\r\n    const cutStartMs = cutStart * 1000;\r\n    const cutEndMs = cutEnd * 1000;\r\n    const fadeMs = 3000;\r\n\r\n    const decoder = new Decoder();\r\n    const buffer = await decoder.decodeFile(file);\r\n\r\n    const manipulator = new BufferManipulations(buffer);\r\n    manipulator.cut(cutStartMs, cutEndMs);\r\n    if (addFadeIn) manipulator.fadeIn(0, fadeMs);\r\n    if (addFadeOut) manipulator.fadeOut(fadeMs);\r\n\r\n    const processedBuffer = await manipulator.apply();\r\n\r\n    const encoder = new Encoder();\r\n    const blob = await encoder.encodeToMP3Blob(processedBuffer, 192);\r\n    this.setState({\r\n      blob,\r\n      isBeingCut: false,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param song Editable song with the new album cover.\r\n   */\r\n  onAlbumCoverUploaded = (newCover: AlbumCover) => {\r\n    this.setState({\r\n      albumCover: newCover,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      blob,\r\n      file,\r\n      albumCover,\r\n      originalSong,\r\n      editableSong,\r\n      isCutModeEnabled,\r\n      isEditModeEnabled,\r\n      isBeingCut,\r\n      wereChangesSaved,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"row align-items-center mzt-song-container\">\r\n\r\n        <div className=\"col-12\">\r\n          <div className=\"row mzt-row-song\">\r\n            <div className=\"col\">\r\n              <SongHeader\r\n                file={file}\r\n                song={originalSong}\r\n                albumCover={albumCover}\r\n                editableSong={editableSong}\r\n                onToggleCutMode={this.handleToggleCutMode}\r\n                onToggleEditMode={this.handleToggleEditMode}\r\n                onClickDownload={this.handleClickDownloadSong}\r\n                isCuttingEnabled={isCutModeEnabled}\r\n                isEditingEnabled={isEditModeEnabled}\r\n                isDownloadEnabled={wereChangesSaved}\r\n              />\r\n\r\n              {isCutModeEnabled && !isBeingCut &&\r\n                <AudioPlayer\r\n                  blobToPlay={blob || file}\r\n                  songToPlay={originalSong}\r\n                  onCut={this.handleCutSong}\r\n                />\r\n              }\r\n\r\n              {isEditModeEnabled &&\r\n                <TagEditor\r\n                  originalSong={editableSong}\r\n                  onSaveChanges={this.onSongSave}\r\n                  onUploadCover={this.onAlbumCoverUploaded}\r\n                  onCancelChanges={this.handleClickCancelChanges}\r\n                />\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SongRow;\r\n","import Song from './song';\r\n\r\nclass FileSelection {\r\n    constructor(\r\n        public file: File,\r\n        public song: Song\r\n    ) { }\r\n}\r\n\r\nexport default FileSelection;","import AlbumCover from './albumCover';\r\n\r\n/**\r\n * Represents an uploaded song along with its information.\r\n */\r\nexport default class Song {\r\n  constructor(\r\n    public artist: string = '',\r\n    public title: string = '',\r\n    public album: string = '',\r\n    public year: string = '',\r\n    public albumCover?: AlbumCover,\r\n    ) { }\r\n\r\n  /**\r\n   * Checks object equality between the current song and the passed in.\r\n   * @param other song to compare to\r\n   * @returns true if songs are equal, else - false\r\n   */\r\n  public equals(other?: Song): boolean {\r\n    if (!other\r\n      || this.artist !== other.artist\r\n      || this.title !== other.title\r\n      || this.album !== other.album\r\n      || this.year !== other.year\r\n      ) {\r\n      return false;\r\n    }\r\n\r\n    if (this.albumCover && !this.albumCover.equals(other.albumCover)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns a deep copy of the current song object.\r\n   */\r\n  public clone(): Song {\r\n    const cover = this.albumCover;\r\n    const coverClone = cover ? new AlbumCover(cover.format, cover.dataAsArrayBuffer) : undefined;\r\n    return new Song(this.artist, this.title, this.album, this.year, coverClone);\r\n  }\r\n\r\n  /**\r\n   * Copies values from the origin song to the 'other' song.\r\n   *\r\n   * @param other Song to which to copy over values.\r\n   * @returns Song with copied over values.\r\n   */\r\n  public copyTo(other: Song): Song {\r\n    other.artist = this.artist;\r\n    other.title = this.title;\r\n    other.album = this.album;\r\n    other.year = this.year;\r\n\r\n    if (!this.albumCover) {\r\n      other.albumCover = undefined;\r\n    } else if (other.albumCover) {\r\n      this.albumCover.copyTo(other.albumCover);\r\n    } else {\r\n      const cover = this.albumCover;\r\n      other.albumCover = new AlbumCover(cover.format, cover.dataAsArrayBuffer);\r\n    }\r\n\r\n    return other;\r\n  }\r\n}\r\n","import TagReader from 'jsmediatags';\r\n\r\nimport FileSelection from '../models/fileSelection';\r\nimport AlbumCover from '../models/albumCover';\r\nimport Song from '../models/song';\r\n\r\nexport default class FileHelper {\r\n  static convertFilesToSongs(files: Array<File>): Array<Promise<FileSelection>> {\r\n    const promises = new Array<Promise<FileSelection>>();\r\n\r\n    files.forEach((file) => {\r\n      promises.push(new Promise<FileSelection>((resolve, reject) => {\r\n        TagReader.read(file, {\r\n          // Successfully read file's tags\r\n          onSuccess: (tags: any) => {\r\n            const { artist, title, album, year, /*genre, trackNo,*/ picture } = tags.tags;\r\n\r\n            const cover = picture ? new AlbumCover(picture.format, picture.data) : undefined;\r\n            const song = new Song(artist, title, album, year, cover);\r\n            const fileSelection = new FileSelection(file, song);\r\n            resolve(fileSelection);\r\n          },\r\n          // Failed to read file's tags\r\n          onError: (error: any) => {\r\n            debugger;\r\n            // TODO: Find out what information is store in the 'error' param\r\n            const message = `Failed to load: ${file.name} because ${error}`;\r\n            reject(message);\r\n          },\r\n        });\r\n      }));\r\n    });\r\n\r\n    return promises;\r\n  }\r\n}\r\n","import React, { Component, ChangeEvent } from 'react';\r\nimport FileHelper from '../../helpers/fileHelper';\r\nimport './file-input.css';\r\n\r\ntype Props = {\r\n  onFilesSelected: Function,\r\n};\r\ntype State = {\r\n  isProcessing: boolean,\r\n};\r\n\r\nclass FileInput extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isProcessing: false,\r\n    };\r\n\r\n    this.onFilesSelected = this.onFilesSelected.bind(this);\r\n    this.onLoadDummySongs = this.onLoadDummySongs.bind(this);\r\n  }\r\n\r\n  async onInputClicked() {\r\n    const input = document.getElementById('btn-upload-songs');\r\n    if (input) {\r\n      input.click();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * IGNORE THE CODING CONVENTIONS USED IN THIS NEW FUNCTION.\r\n   * THE PROJECT IS NO LONGER MAINTAINED AND I ONLY WANTED TO\r\n   * ADD THE \"LOAD DUMMY SONGS\" OPTION.\r\n   * i can write good code pls i promis\r\n   */\r\n  async onLoadDummySongs() {\r\n    const song1 = require('../../songs/song1.mp3');\r\n    const song2 = require('../../songs/song2.mp3');\r\n    const song3 = require('../../songs/song3.mp3');\r\n    \r\n    const dummySongs: File[] = [];\r\n\r\n    fetch(song1)\r\n      .then(response => response.blob())\r\n      .then(async blob => {\r\n        const file = new File([blob], \"song1.mp3\");\r\n        dummySongs.push(file);\r\n        if (dummySongs.length === 3) {\r\n          const potentialSongs = await FileHelper.convertFilesToSongs(dummySongs);\r\n          this.props.onFilesSelected(potentialSongs);\r\n        }\r\n      }\r\n    );\r\n\r\n    fetch(song2)\r\n      .then(response => response.blob())\r\n      .then(async blob => {\r\n        const file = new File([blob], \"song2.mp3\");\r\n        dummySongs.push(file);\r\n        if (dummySongs.length === 3) {\r\n          const potentialSongs = await FileHelper.convertFilesToSongs(dummySongs);\r\n          this.props.onFilesSelected(potentialSongs);\r\n        }\r\n      }\r\n    );\r\n\r\n    fetch(song3)\r\n      .then(response => response.blob())\r\n      .then(async blob => {\r\n        const file = new File([blob], \"song3.mp3\");\r\n        dummySongs.push(file);\r\n        if (dummySongs.length === 3) {\r\n          const potentialSongs = await FileHelper.convertFilesToSongs(dummySongs);\r\n          this.props.onFilesSelected(potentialSongs);\r\n        }\r\n      }\r\n    );\r\n\r\n    this.setState({isProcessing: true});\r\n  }\r\n\r\n  async onFilesSelected(e: ChangeEvent<HTMLInputElement>) {\r\n    // No files selected\r\n    if (!e.target.files || e.target.files.length < 1) {\r\n      return;\r\n    }\r\n\r\n    const selectedFiles = Array.from(e.target.files) as Array<File>;\r\n    const potentialSongs = await FileHelper.convertFilesToSongs(selectedFiles);\r\n    this.props.onFilesSelected(potentialSongs);\r\n\r\n    // Reset the input value so the user could upload the same files a second time\r\n    const input = document.getElementById('btn-upload-songs');\r\n    if (input) {\r\n      input.nodeValue = '';\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const loadingMessage = !this.state.isProcessing\r\n      ? null\r\n      : (\r\n        <div className=\"row\">\r\n          <div className=\"col d-flex justify-content-end\">\r\n            Loading dummy songs\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    return (\r\n      <div className=\"row justify-content-center mb-4\">\r\n        <div className=\"col-4\">\r\n\r\n          {/* Visible */}\r\n          <div className=\"song-buttons\">\r\n            <div className=\"btn btn-primary\" onClick={this.onInputClicked}>\r\n              Upload songs\r\n            </div>\r\n\r\n            <span>or</span>\r\n\r\n            <div className=\"btn btn-primary\" onClick={this.onLoadDummySongs}>\r\n              Load dummy songs\r\n            </div>\r\n          </div>\r\n\r\n          {loadingMessage}\r\n          \r\n          {/* Hidden */}\r\n          <input id=\"btn-upload-songs\"\r\n            className=\"mzt-invisible\"\r\n            type=\"file\"\r\n            multiple\r\n            accept=\".mp3\"\r\n            onChange={this.onFilesSelected}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FileInput;\r\n","import React from 'react';\r\nimport { Progress } from 'react-sweet-progress';\r\nimport 'react-sweet-progress/lib/style.css';\r\n\r\ntype Props = {\r\n  maxValue: number;\r\n  curValue: number;\r\n  heading: string;\r\n};\r\n\r\nfunction ProgressBar(props: Props) {\r\n  const { maxValue, curValue, heading } = props;\r\n  const percentage = Math.round(curValue / maxValue * 100);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-6 offset-3\">\r\n        <h4>{heading}</h4>\r\n        <Progress percent={percentage} status=\"success\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProgressBar;\r\n","// TODO: Show warning when choosing new songs again\r\n\r\nimport React, { Component } from 'react';\r\nimport SongRow from '../SongRow/SongRow';\r\nimport FileInput from '../FileInput/FileInput';\r\nimport ProgressBar from '../ProgressBar/ProgressBar';\r\nimport FileSelection from '../../models/fileSelection';\r\n\r\ntype Props = {};\r\ntype State = {\r\n  uploadedFiles: Array<FileSelection>;\r\n  songsToProcess: number;\r\n  songsProcessed: number;\r\n};\r\n\r\nclass Main extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      uploadedFiles: [],\r\n      songsToProcess: 0,\r\n      songsProcessed: 0,\r\n    };\r\n  }\r\n\r\n  handleFilesSelected = async (potentialSongs: Array<Promise<FileSelection>>) => {\r\n    const { uploadedFiles } = this.state;\r\n    if (uploadedFiles.length > 0) {\r\n      await this.removeSongsOneByOne();\r\n    }\r\n\r\n    this.setState({\r\n      uploadedFiles: [],\r\n      songsProcessed: 0,\r\n      songsToProcess: potentialSongs.length,\r\n    });\r\n\r\n    // TODO: Fix this\r\n    // The timeout allows the progress bar to keep up but it slows down the tag reading drastically.\r\n    let timeout = 0;\r\n    for (const potentialSong of potentialSongs) {\r\n      setTimeout(() => {\r\n        potentialSong.then(\r\n          (result: FileSelection) => {\r\n            this.setState(prev => ({\r\n              uploadedFiles: [...prev.uploadedFiles, result],\r\n              songsProcessed: prev.songsProcessed + 1,\r\n            }));\r\n          },\r\n          (error: string) => {\r\n            console.log(error);\r\n            debugger;\r\n            this.setState(prev => ({\r\n              songsProcessed: prev.songsProcessed + 1,\r\n            }));\r\n          },\r\n        );\r\n      },         timeout);\r\n      timeout += 100;\r\n    }\r\n  }\r\n\r\n  removeSongsOneByOne = async () => {\r\n    return new Promise((resolve, reject) => {\r\n      const { uploadedFiles } = this.state;\r\n      let timeout = 100;\r\n\r\n      for (let i = 0, len = uploadedFiles.length; i < len; i++) {\r\n        setTimeout(() => {\r\n          uploadedFiles.pop();\r\n\r\n          this.setState({\r\n            uploadedFiles,\r\n          });\r\n\r\n          if (uploadedFiles.length < 1) resolve();\r\n        },         timeout);\r\n        timeout += 100;\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { uploadedFiles, songsToProcess, songsProcessed } = this.state;\r\n    const isLoading = songsToProcess !== songsProcessed && songsToProcess > 0;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n          {\r\n            isLoading\r\n              ? <ProgressBar\r\n                  maxValue={songsToProcess}\r\n                  curValue={songsProcessed}\r\n                  heading={`Songs processed: ${songsProcessed}/${songsToProcess}`} />\r\n              : <FileInput onFilesSelected={this.handleFilesSelected} />\r\n          }\r\n\r\n          {uploadedFiles.map(u => <SongRow key={u.file.name} file={u.file} song={u.song} />)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main/Main';\n\nReactDOM.render(<Main />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/cover_350x350.c4a0bf2b.png\";"],"sourceRoot":""}